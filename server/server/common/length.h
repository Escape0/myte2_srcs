#ifndef __INC_METIN_II_LENGTH_H__
#define __INC_METIN_II_LENGTH_H__
#include "service.h"

enum EMisc
{
	MAX_HOST_LENGTH = 15,
	IP_ADDRESS_LENGTH = 15,
	LOGIN_MAX_LEN = 30,
	PASSWD_MAX_LEN = 16,
#ifdef ENABLE_PLAYER_PER_ACCOUNT5
	PLAYER_PER_ACCOUNT = 5,
#else
	PLAYER_PER_ACCOUNT = 4,
#endif
	ACCOUNT_STATUS_MAX_LEN = 8,
	CHARACTER_NAME_MAX_LEN = 64,
	SHOP_SIGN_MAX_LEN = 32,
	INVENTORY_MAX_NUM = 180,
	EMPIRE_MAX_NUM = 4,
	BANWORD_MAX_LEN = 24,
	SOCIAL_ID_MAX_LEN = 18,

	GUILD_NAME_MAX_LEN = 12,

	SHOP_HOST_ITEM_MAX_NUM = 45,	/* È£½ºÆ®ÀÇ ÃÖ´ë ¾ÆÀÌÅÛ °³¼ö */

	SHOP_PRICELIST_MAX_NUM = 45,	///< °³ÀÎ»óÁ¡ °¡°İÁ¤º¸ ¸®½ºÆ®¿¡¼­ À¯ÁöÇÒ °¡°İÁ¤º¸ÀÇ ÃÖ´ë °¹¼ö

	CHAT_MAX_LEN = 700,

	QUICKSLOT_MAX_NUM = 36,

	JOURNAL_MAX_NUM = 2,

	QUERY_MAX_LEN = 8192,

	PLAYER_EXP_TABLE_MAX = 250,
	PLAYER_MAX_LEVEL_CONST = 250,

	GUILD_MAX_LEVEL = 20,

	SKILL_MAX_NUM = 255,
	SKILLBOOK_DELAY_MIN = 64800,
	SKILLBOOK_DELAY_MAX = 108000,
	SKILL_MAX_LEVEL = 40,

	APPLY_NAME_MAX_LEN = 32,
	EVENT_FLAG_NAME_MAX_LEN = 32,

	MOB_SKILL_MAX_NUM = 5,

	POINT_MAX_NUM = 255,
	DRAGON_SOUL_BOX_SIZE = 32,
	DRAGON_SOUL_BOX_COLUMN_NUM = 8,
	DRAGON_SOUL_REFINE_GRID_SIZE = 15,

	WEAR_MAX_NUM = 32,
#ifdef ENABLE_CHEQUE_SYSTEM
	CHEQUE_MAX = 1000,
#endif

	//LIMIT_GOLD
	GOLD_MAX = 2000000000,

	//END_LIMIT_GOLD

	SHOP_TAB_NAME_MAX = 32,
	SHOP_TAB_COUNT_MAX = 3,

#ifdef ENABLE_SPECIAL_INVENTORY_SYSTEM
	SKILL_BOOK_INVENTORY_MAX_NUM = 225,
	UPGRADE_ITEMS_INVENTORY_MAX_NUM = 225,
	STONE_ITEMS_INVENTORY_MAX_NUM = 225,
	CHEST_ITEMS_INVENTORY_MAX_NUM = 225,
	ATTR_ITEMS_INVENTORY_MAX_NUM = 225,
	FLOWER_ITEMS_INVENTORY_MAX_NUM = 225,
#endif

	BELT_INVENTORY_SLOT_WIDTH = 4,
	BELT_INVENTORY_SLOT_HEIGHT = 4,

	BELT_INVENTORY_SLOT_COUNT = BELT_INVENTORY_SLOT_WIDTH * BELT_INVENTORY_SLOT_HEIGHT,

#ifdef ENABLE_HWID_BAN_SYSTEM
	/* Security */
	CPU_ID_MAX_LEN = 128,
	HDD_MODEL_MAX_LEN = 128,
	MACHINE_GUID_MAX_LEN = 128,
	MAC_ADDR_MAX_LEN = 128,
	HDD_SERIAL_MAX_LEN = 128,
	/* Security */
#endif
#ifdef ENABLE_FISH_JIGSAW_EVENT
	FISH_EVENT_SLOTS_NUM = 24,
	ITEM_FISH_EVENT_BOX = 25106,
	ITEM_FISH_EVENT_BOX_SPECIAL = 25107,
#endif
#ifdef __ENABLE_MAILBOX_SYSTEM__
	MAILBOX_STRING_MAX_LEN = 256,
#endif
#ifdef ENABLE_ZODIAC_TEMPLE_SYSTEM
	ZODIAC_POINT_MAX = 1024,
#endif
#ifdef ENABLE_GEM_SYSTEM
	GEM_SLOTS_MAX_NUM = 27,
	GEM_REFRESH_ITEM_VNUM = 39063,
	GEM_UNLOCK_ITEM_VNUM = 39064,
	GEM_GLIMMERSTONE_VNUM = 50926,
	GEM_REFRESH_PULSE = 5, //hours
	GEM_MAX = 1000000,
#endif
#ifdef ENABLE_WORSHIP_SYSTEM
	WORSHIP_POINT_MAX = 60000,
#endif
};

#ifdef ENABLE_CHANGELOOK_SYSTEM
enum EChangeLookInfo
{
	CL_WINDOW_MAX_MATERIALS = 3,
	CL_CLEAN_ATTR_VALUE0 = 8,
#ifdef ENABLE_CHEQUE_SYSTEM
	CL_TRANSMUTATION_PRICE = 10,
#else
	CL_TRANSMUTATION_PRICE = 1000000000,
#endif
	CL_SCROLL_VNUM = 72326,
};
#endif

#ifdef ENABLE_FISH_JIGSAW_EVENT
enum EFishEventInfo
{
	FISH_EVENT_SHAPE_NONE,
	FISH_EVENT_SHAPE_1,
	FISH_EVENT_SHAPE_2,
	FISH_EVENT_SHAPE_3,
	FISH_EVENT_SHAPE_4,
	FISH_EVENT_SHAPE_5,
	FISH_EVENT_SHAPE_6,
	FISH_EVENT_SHAPE_7,
	FISH_EVENT_SHAPE_MAX_NUM,
};
#endif

enum EWearPositions
{
	WEAR_BODY,		// 0
	WEAR_HEAD,		// 1
	WEAR_FOOTS,		// 2
	WEAR_WRIST,		// 3
	WEAR_WEAPON,	// 4
	WEAR_NECK,		// 5
	WEAR_EAR,		// 6
	WEAR_UNIQUE1,	// 7
	WEAR_UNIQUE2,	// 8
	WEAR_ARROW,		// 9
	WEAR_SHIELD,	// 10
	WEAR_ABILITY1,  // 11
	WEAR_ABILITY2,  // 12
	WEAR_ABILITY3,  // 13
	WEAR_ABILITY4,  // 14
	WEAR_ABILITY5,  // 15
	WEAR_ABILITY6,  // 16
	WEAR_ABILITY7,  // 17
	WEAR_ABILITY8,  // 18
	WEAR_COSTUME_BODY,	// 19
	WEAR_COSTUME_HAIR,	// 20
#ifdef ENABLE_WEAPON_COSTUME_SYSTEM
	WEAR_COSTUME_WEAPON,
#endif
#ifdef ENABLE_ACCE_SYSTEM
	WEAR_COSTUME_SASH,
#endif
#ifdef ENABLE_MOUNT_COSTUME_SYSTEM
	WEAR_COSTUME_MOUNT,
#endif
#ifdef ENABLE_AURA_SYSTEM
	WEAR_COSTUME_AURA,
#endif
	WEAR_RING1,			// 21	: ½Å±Ô ¹İÁö½½·Ô1 (¿ŞÂÊ)
	WEAR_RING2,			// 22	: ½Å±Ô ¹İÁö½½·Ô2 (¿À¸¥ÂÊ)
	WEAR_BELT,			// 23	: ½Å±Ô º§Æ®½½·Ô
#ifdef ENABLE_TALISMAN_SYSTEM
	WEAR_CHARM,			// 26
#endif
#ifdef ENABLE_EXTENDED_PET_SYSTEM
	WEAR_PET,			// 27
#endif

	WEAR_MAX = 32	//
};

enum EDragonSoulDeckType
{
	DRAGON_SOUL_DECK_0,
	DRAGON_SOUL_DECK_1,
	DRAGON_SOUL_DECK_MAX_NUM = 2,

	DRAGON_SOUL_DECK_RESERVED_MAX_NUM = 3,	// NOTE: Áß¿ä! ¾ÆÁ÷ »ç¿ëÁßÀÌÁø ¾ÊÁö¸¸, 3ÆäÀÌÁö ºĞ·®À» ¿¹¾à ÇØ µÒ. DS DECKÀ» ´Ã¸± °æ¿ì ¹İµå½Ã ±× ¼ö¸¸Å­ RESERVED¿¡¼­ Â÷°¨ÇØ¾ß ÇÔ!
};

enum ESex
{
	SEX_MALE,
	SEX_FEMALE
};

enum EAbilityCategory
{
	CATEGORY_PHYSICAL,	/* 신체적 어빌리티 */
	CATEGORY_MENTAL,	/* 정신적 어빌리티 */
	CATEGORY_ATTRIBUTE,	/* 능력 어빌리티 */
};

enum EJobs
{
	JOB_WARRIOR,
	JOB_ASSASSIN,
	JOB_SURA,
	JOB_SHAMAN,
#ifdef ENABLE_WOLFMAN_CHARACTER
	JOB_WOLFMAN,		// 수인족. 개발코드명이 WOLFMAN. (기획자가 정했씀. 나중에 WOLF GIRL 생겨도 나한테 머라하지마셈ㅠㅠ)
#endif
	JOB_MAX_NUM
};

enum ESkillGroups
{
	SKILL_GROUP_MAX_NUM = 2,
};

enum ERaceFlags
{
	RACE_FLAG_ANIMAL = (1 << 0),
	RACE_FLAG_UNDEAD = (1 << 1),
	RACE_FLAG_DEVIL = (1 << 2),
	RACE_FLAG_HUMAN = (1 << 3),
	RACE_FLAG_ORC = (1 << 4),
	RACE_FLAG_MILGYO = (1 << 5),
	RACE_FLAG_INSECT = (1 << 6),
	RACE_FLAG_FIRE = (1 << 7),
	RACE_FLAG_ICE = (1 << 8),
	RACE_FLAG_DESERT = (1 << 9),
	RACE_FLAG_TREE = (1 << 10),
	RACE_FLAG_ELEC = (1 << 11),
	RACE_FLAG_WIND = (1 << 12),
	RACE_FLAG_EARTH = (1 << 13),
	RACE_FLAG_DARK = (1 << 14),
	RACE_FLAG_ATT_ELEC = (1 << 15),
	RACE_FLAG_ATT_FIRE = (1 << 16),
	RACE_FLAG_ATT_ICE = (1 << 17),
	RACE_FLAG_ATT_WIND = (1 << 18),
	RACE_FLAG_ATT_EARTH = (1 << 19),
	RACE_FLAG_ATT_DARK = (1 << 20),
	RACE_FLAG_ATT_CZ = (1 << 21),
#ifdef ENABLE_MUSHROOM_DUNGEON
	RACE_FLAG_ATT_MUSHROOM = (1 << 22),
#endif
#ifdef ENABLE_WATER_DUNGEON
	RACE_FLAG_ATT_WATER = (1 << 23),
#endif
};

enum ELoads
{
	LOAD_NONE,
	LOAD_LIGHT,
	LOAD_NORMAL,
	LOAD_HEAVY,
	LOAD_MASSIVE
};

enum QuickSlotTypes
{
	QUICKSLOT_TYPE_NONE,
	QUICKSLOT_TYPE_ITEM,
	QUICKSLOT_TYPE_SKILL,
	QUICKSLOT_TYPE_COMMAND,
	QUICKSLOT_TYPE_MAX_NUM,
};

enum EParts
{
	PART_MAIN,
	PART_WEAPON,
	PART_HEAD,
	PART_HAIR,
#ifdef ENABLE_ACCE_SYSTEM
	PART_SASH,
#endif
#ifdef ENABLE_AURA_SYSTEM
	PART_AURA,
#endif
	PART_MAX_NUM,
};

enum EChatType
{
	CHAT_TYPE_TALKING,	/* ±×³É Ã¤ÆÃ */
	CHAT_TYPE_INFO,	/* Á¤º¸ (¾ÆÀÌÅÛÀ» Áı¾ú´Ù, °æÇèÄ¡¸¦ ¾ò¾ú´Ù. µî) */
	CHAT_TYPE_NOTICE,	/* °øÁö»çÇ× */
	CHAT_TYPE_PARTY,	/* ÆÄÆ¼¸» */
	CHAT_TYPE_GUILD,	/* ±æµå¸» */
	CHAT_TYPE_COMMAND,	/* ÀÏ¹İ ¸í·É */
	CHAT_TYPE_SHOUT,	/* ¿ÜÄ¡±â */
	CHAT_TYPE_WHISPER,
	CHAT_TYPE_BIG_NOTICE,
#ifdef ENABLE_DICE_SYSTEM
	CHAT_TYPE_DICE_INFO, //11
#endif
#ifdef ENABLE_OX_RENEWAL
	CHAT_TYPE_CONTROL_NOTICE,
#endif
#ifdef ENABLE_ZODIAC_TEMPLE_CHAT
	CHAT_TYPE_ZODIAC_NOTICE,
	CHAT_TYPE_ZODIAC_SUB_NOTICE,
	CHAT_TYPE_ZODIAC_NOTICE_CLEAR,
#endif
};

enum EWhisperType
{
	WHISPER_TYPE_NORMAL = 0,
	WHISPER_TYPE_NOT_EXIST = 1,
	WHISPER_TYPE_TARGET_BLOCKED = 2,
	WHISPER_TYPE_SENDER_BLOCKED = 3,
	WHISPER_TYPE_ERROR = 4,
	WHISPER_TYPE_GM = 5,
	WHISPER_TYPE_SYSTEM = 6,
};

enum ECharacterPosition
{
	POSITION_GENERAL,
	POSITION_BATTLE,
	POSITION_DYING,
	POSITION_SITTING_CHAIR,
	POSITION_SITTING_GROUND,
};

enum EGMLevels
{
	GM_PLAYER,
	GM_LOW_WIZARD,
	GM_WIZARD,
	GM_HIGH_WIZARD,
	GM_GOD,
	GM_IMPLEMENTOR
};

enum EMobRank
{
	MOB_RANK_PAWN,
	MOB_RANK_S_PAWN,
	MOB_RANK_KNIGHT,
	MOB_RANK_S_KNIGHT,
	MOB_RANK_BOSS,
	MOB_RANK_KING,
	MOB_RANK_MAX_NUM
};

enum ECharType
{
	CHAR_TYPE_MONSTER,
	CHAR_TYPE_NPC,
	CHAR_TYPE_STONE,
	CHAR_TYPE_WARP,
	CHAR_TYPE_DOOR,
	CHAR_TYPE_BUILDING,
	CHAR_TYPE_PC,
	CHAR_TYPE_POLYMORPH_PC,
	CHAR_TYPE_HORSE,
	CHAR_TYPE_GOTO
};

enum EBattleType
{
	BATTLE_TYPE_MELEE,
	BATTLE_TYPE_RANGE,
	BATTLE_TYPE_MAGIC,
	BATTLE_TYPE_SPECIAL,
	BATTLE_TYPE_POWER,
	BATTLE_TYPE_TANKER,
	BATTLE_TYPE_SUPER_POWER,
	BATTLE_TYPE_SUPER_TANKER,
	BATTLE_TYPE_MAX_NUM
};

enum EApplyTypes
{
	APPLY_NONE,
	APPLY_MAX_HP,
	APPLY_MAX_SP,
	APPLY_CON,
	APPLY_INT,
	APPLY_STR,
	APPLY_DEX,
	APPLY_ATT_SPEED,
	APPLY_MOV_SPEED,
	APPLY_CAST_SPEED,
	APPLY_HP_REGEN,
	APPLY_SP_REGEN,
	APPLY_POISON_PCT,
	APPLY_STUN_PCT,
	APPLY_SLOW_PCT,
	APPLY_CRITICAL_PCT,
	APPLY_PENETRATE_PCT,
	APPLY_ATTBONUS_HUMAN,
	APPLY_ATTBONUS_ANIMAL,
	APPLY_ATTBONUS_ORC,
	APPLY_ATTBONUS_MILGYO,
	APPLY_ATTBONUS_UNDEAD,
	APPLY_ATTBONUS_DEVIL,
	APPLY_STEAL_HP,
	APPLY_STEAL_SP,
	APPLY_MANA_BURN_PCT,
	APPLY_DAMAGE_SP_RECOVER,
	APPLY_BLOCK,
	APPLY_DODGE,
	APPLY_RESIST_SWORD,
	APPLY_RESIST_TWOHAND,
	APPLY_RESIST_DAGGER,
	APPLY_RESIST_BELL,
	APPLY_RESIST_FAN,
	APPLY_RESIST_BOW,
	APPLY_RESIST_FIRE,
	APPLY_RESIST_ELEC,
	APPLY_RESIST_MAGIC,
	APPLY_RESIST_WIND,
	APPLY_REFLECT_MELEE,
	APPLY_REFLECT_CURSE,
	APPLY_POISON_REDUCE,
	APPLY_KILL_SP_RECOVER,
	APPLY_EXP_DOUBLE_BONUS,
	APPLY_GOLD_DOUBLE_BONUS,
	APPLY_ITEM_DROP_BONUS,
	APPLY_POTION_BONUS,
	APPLY_KILL_HP_RECOVER,
	APPLY_IMMUNE_STUN,
	APPLY_IMMUNE_SLOW,
	APPLY_IMMUNE_FALL,
	APPLY_SKILL,
	APPLY_BOW_DISTANCE,
	APPLY_ATT_GRADE_BONUS,
	APPLY_DEF_GRADE_BONUS,
	APPLY_MAGIC_ATT_GRADE,
	APPLY_MAGIC_DEF_GRADE,
	APPLY_CURSE_PCT,
	APPLY_MAX_STAMINA,
	APPLY_ATTBONUS_WARRIOR,
	APPLY_ATTBONUS_ASSASSIN,
	APPLY_ATTBONUS_SURA,
	APPLY_ATTBONUS_SHAMAN,
	APPLY_ATTBONUS_MONSTER,
	APPLY_MALL_ATTBONUS,
	APPLY_MALL_DEFBONUS,
	APPLY_MALL_EXPBONUS,
	APPLY_MALL_ITEMBONUS,
	APPLY_MALL_GOLDBONUS,
	APPLY_MAX_HP_PCT,
	APPLY_MAX_SP_PCT,
	APPLY_SKILL_DAMAGE_BONUS,
	APPLY_NORMAL_HIT_DAMAGE_BONUS,
	APPLY_SKILL_DEFEND_BONUS,
	APPLY_NORMAL_HIT_DEFEND_BONUS,
	APPLY_EXTRACT_HP_PCT,
	APPLY_RESIST_WARRIOR,
	APPLY_RESIST_ASSASSIN,
	APPLY_RESIST_SURA,
	APPLY_RESIST_SHAMAN,
	APPLY_ENERGY,
	APPLY_DEF_GRADE,
	APPLY_COSTUME_ATTR_BONUS,
	APPLY_MAGIC_ATTBONUS_PER,
	APPLY_MELEE_MAGIC_ATTBONUS_PER,
	APPLY_RESIST_ICE,
	APPLY_RESIST_EARTH,
	APPLY_RESIST_DARK,
	APPLY_ANTI_CRITICAL_PCT,
	APPLY_ANTI_PENETRATE_PCT,
#ifdef ENABLE_WOLFMAN_CHARACTER
	APPLY_BLEEDING_PCT,
	APPLY_BLEEDING_REDUCE,
	APPLY_ATTBONUS_WOLFMAN,
	APPLY_RESIST_WOLFMAN,
	APPLY_RESIST_CLAW,
#endif
#ifdef ENABLE_MAGIC_REDUCTION_SYSTEM
	APPLY_ANTI_RESIST_MAGIC,
#endif
#ifdef ENABLE_BONUS_STRONG_AGAINST_WEAPON
	APPLY_ATTBONUS_SWORD,			// 92
	APPLY_ATTBONUS_TWOHANDED,		// 93
	APPLY_ATTBONUS_DAGGER,			// 94
	APPLY_ATTBONUS_BELL,			// 95
	APPLY_ATTBONUS_FAN,				// 96
	APPLY_ATTBONUS_BOW,				// 97
#endif
#ifdef ENABLE_ELEMENT_NEW_BONUSES
	APPLY_ATTBONUS_ELEC,
	APPLY_ATTBONUS_FIRE,
	APPLY_ATTBONUS_ICE,
	APPLY_ATTBONUS_WIND,
	APPLY_ATTBONUS_EARTH,
	APPLY_ATTBONUS_DARK,
#endif
	APPLY_RESIST_HUMAN,
	APPLY_ATTBONUS_STONE,
	APPLY_ATTBONUS_DESERT,
	APPLY_ATTBONUS_CZ,
#ifdef ENABLE_BONUS_STRONG_AGAINST_BOSS
	APPLY_ATTBONUS_RAZADOR,
	APPLY_ATTBONUS_NEMERE,
	APPLY_ATTBONUS_HYDRA,
	APPLY_ATTBONUS_JOTUN_THRYM,
	APPLY_ATTBONUS_LUSIFER,
	APPLY_ATTBONUS_BERAN_SETAOU,
	APPLY_ATTBONUS_AZRAEL,
	APPLY_ATTBONUS_MELEY,
#endif
#ifdef ENABLE_MOUNT_COSTUME_SYSTEM
	APPLY_MOUNT,
#endif
#ifdef ENABLE_MUSHROOM_DUNGEON
	APPLY_ATTBONUS_MUSHROOM,
	APPLY_RESIST_MUSHROOM,
#endif
#ifdef ENABLE_WATER_DUNGEON
	APPLY_ATTBONUS_WATER,
	APPLY_RESIST_WATER,
#endif
#ifdef ENABLE_BONUS_TO_BOSS
	APPLY_ATTBONUS_BOSS,
#endif
	MAX_APPLY_NUM,
};

enum EOnClickEvents
{
	ON_CLICK_NONE,
	ON_CLICK_SHOP,
	ON_CLICK_TALK,
	ON_CLICK_MAX_NUM
};

enum EWindows
{
	RESERVED_WINDOW,
	INVENTORY,
	EQUIPMENT,
	SAFEBOX,
	MALL,
	DRAGON_SOUL_INVENTORY,
	BELT_INVENTORY,
#ifdef ENABLE_SPECIAL_INVENTORY_SYSTEM
	SKILL_BOOK_INVENTORY,
	UPGRADE_ITEMS_INVENTORY,
	STONE_ITEMS_INVENTORY,
	CHEST_ITEMS_INVENTORY,
	ATTR_ITEMS_INVENTORY,
	FLOWER_ITEMS_INVENTORY,
#endif
	GROUND
};

enum EMobSizes
{
	MOBSIZE_RESERVED,
	MOBSIZE_SMALL,
	MOBSIZE_MEDIUM,
	MOBSIZE_BIG
};

enum EAIFlags
{
	AIFLAG_AGGRESSIVE = (1 << 0),
	AIFLAG_NOMOVE = (1 << 1),
	AIFLAG_COWARD = (1 << 2),
	AIFLAG_NOATTACKSHINSU = (1 << 3),
	AIFLAG_NOATTACKJINNO = (1 << 4),
	AIFLAG_NOATTACKCHUNJO = (1 << 5),
	AIFLAG_ATTACKMOB = (1 << 6),
	AIFLAG_BERSERK = (1 << 7),
	AIFLAG_STONESKIN = (1 << 8),
	AIFLAG_GODSPEED = (1 << 9),
	AIFLAG_DEATHBLOW = (1 << 10),
	AIFLAG_REVIVE = (1 << 11),
};

enum EMobStatType
{
	MOB_STATTYPE_POWER,
	MOB_STATTYPE_TANKER,
	MOB_STATTYPE_SUPER_POWER,
	MOB_STATTYPE_SUPER_TANKER,
	MOB_STATTYPE_RANGE,
	MOB_STATTYPE_MAGIC,
};

enum EImmuneFlags
{
	IMMUNE_STUN = (1 << 0),
	IMMUNE_SLOW = (1 << 1),
	IMMUNE_FALL = (1 << 2),
	IMMUNE_CURSE = (1 << 3),
	IMMUNE_POISON = (1 << 4),
	IMMUNE_TERROR = (1 << 5),
	IMMUNE_REFLECT = (1 << 6),
};

enum EMobEnchants
{
	MOB_ENCHANT_CURSE,
	MOB_ENCHANT_SLOW,
	MOB_ENCHANT_POISON,
	MOB_ENCHANT_STUN,
	MOB_ENCHANT_CRITICAL,
	MOB_ENCHANT_PENETRATE,
	MOB_ENCHANTS_MAX_NUM
};

enum EMobResists
{
	MOB_RESIST_SWORD,
	MOB_RESIST_TWOHAND,
	MOB_RESIST_DAGGER,
	MOB_RESIST_BELL,
	MOB_RESIST_FAN,
	MOB_RESIST_BOW,
	MOB_RESIST_FIRE,
	MOB_RESIST_ELECT,
	MOB_RESIST_MAGIC,
	MOB_RESIST_WIND,
	MOB_RESIST_POISON,
	MOB_RESIST_CLAW,
	MOB_RESISTS_MAX_NUM
};

enum SkillAttrType
{
	SKILL_ATTR_TYPE_NORMAL = 1,
	SKILL_ATTR_TYPE_MELEE,
	SKILL_ATTR_TYPE_RANGE,
	SKILL_ATTR_TYPE_MAGIC
	/*
	   SKILL_ATTR_TYPE_FIRE,
	   SKILL_ATTR_TYPE_ICE,
	   SKILL_ATTR_TYPE_ELEC,
	   SKILL_ATTR_TYPE_DARK,
	   */
};

enum SkillType
{
	SKILL_NORMAL,
	SKILL_MASTER,
	SKILL_GRAND_MASTER,
	SKILL_PERFECT_MASTER,
};

enum EGuildWarType
{
	GUILD_WAR_TYPE_FIELD,
	GUILD_WAR_TYPE_BATTLE,
	GUILD_WAR_TYPE_FLAG,
	GUILD_WAR_TYPE_MAX_NUM
};

enum EGuildWarState
{
	GUILD_WAR_NONE,
	GUILD_WAR_SEND_DECLARE,
	GUILD_WAR_REFUSE,
	GUILD_WAR_RECV_DECLARE,
	GUILD_WAR_WAIT_START,
	GUILD_WAR_CANCEL,
	GUILD_WAR_ON_WAR,
	GUILD_WAR_END,
	GUILD_WAR_OVER,
	GUILD_WAR_RESERVE,
};

enum OtherGuildWarOption
{
	GUILD_WAR_DURATION = 30 * 60,
	GUILD_WAR_LADDER_HALF_PENALTY_TIME = 12 * 60 * 60,
};

enum EAttributeSet
{
	ATTRIBUTE_SET_WEAPON,
	ATTRIBUTE_SET_BODY,
	ATTRIBUTE_SET_WRIST,
	ATTRIBUTE_SET_FOOTS,
	ATTRIBUTE_SET_NECK,
	ATTRIBUTE_SET_HEAD,
	ATTRIBUTE_SET_SHIELD,
	ATTRIBUTE_SET_EAR,
	ATTRIBUTE_SET_CHARM,
	ATTRIBUTE_SET_MAX_NUM
};

enum EPrivType
{
	PRIV_NONE,
	PRIV_ITEM_DROP,
	PRIV_GOLD_DROP,
	PRIV_GOLD10_DROP,
	PRIV_EXP_PCT,
	MAX_PRIV_NUM,
};

enum EMoneyLogType
{
	MONEY_LOG_RESERVED,
	MONEY_LOG_MONSTER,
	MONEY_LOG_SHOP,
	MONEY_LOG_REFINE,
	MONEY_LOG_QUEST,
	MONEY_LOG_GUILD,
	MONEY_LOG_MISC,
	MONEY_LOG_MONSTER_KILL,
	MONEY_LOG_DROP,
	MONEY_LOG_TYPE_MAX_NUM,
};

enum EPremiumTypes
{
	PREMIUM_EXP,		// °æÇèÄ¡°¡ 1.2¹è
	PREMIUM_ITEM,		// ¾ÆÀÌÅÛ µå·ÓÀ²ÀÌ 2¹è
	PREMIUM_SAFEBOX,		// Ã¢°í°¡ 1Ä­¿¡¼­ 3Ä­
	PREMIUM_AUTOLOOT,		// µ· ÀÚµ¿ Áİ±â
	PREMIUM_FISH_MIND,		// °í±Ş ¹°°í±â ³¬ÀÏ È®·ü »ó½Â
	PREMIUM_MARRIAGE_FAST,	// ±İ½Ç Áõ°¡ ¾çÀ» ºü¸£°ÔÇÕ´Ï´Ù.
	PREMIUM_GOLD,		// µ· µå·ÓÀ²ÀÌ 1.5¹è
	PREMIUM_MAX_NUM = 9
};

enum SpecialEffect
{
	SE_NONE,

	SE_HPUP_RED,
	SE_SPUP_BLUE,
	SE_SPEEDUP_GREEN,
	SE_DXUP_PURPLE,
	SE_CRITICAL,
	SE_PENETRATE,
	SE_BLOCK,
	SE_DODGE,
	SE_CHINA_FIREWORK,
	SE_SPIN_TOP,
	SE_SUCCESS,
	SE_FAIL,
	SE_LEVELUP_ON_14_FOR_GERMANY,
	SE_LEVELUP_UNDER_15_FOR_GERMANY,
	SE_PERCENT_DAMAGE1,
	SE_PERCENT_DAMAGE2,
	SE_PERCENT_DAMAGE3,

	SE_AUTO_HPUP,
	SE_AUTO_SPUP,

	SE_EQUIP_RAMADAN_RING,		// ¶ó¸¶´Ü ÃÊ½Â´ŞÀÇ ¹İÁö(71135) Âø¿ëÇÒ ¶§ ÀÌÆåÆ® (¹ßµ¿ÀÌÆåÆ®ÀÓ, Áö¼ÓÀÌÆåÆ® ¾Æ´Ô)
	SE_EQUIP_HALLOWEEN_CANDY,		// ÇÒ·ÎÀ© »çÅÁÀ» Âø¿ë(-_-;)ÇÑ ¼ø°£¿¡ ¹ßµ¿ÇÏ´Â ÀÌÆåÆ®
	SE_EQUIP_HAPPINESS_RING,		// Å©¸®½º¸¶½º Çàº¹ÀÇ ¹İÁö(71143) Âø¿ëÇÒ ¶§ ÀÌÆåÆ® (¹ßµ¿ÀÌÆåÆ®ÀÓ, Áö¼ÓÀÌÆåÆ® ¾Æ´Ô)
	SE_EQUIP_LOVE_PENDANT,		// ¹ß·»Å¸ÀÎ »ç¶ûÀÇ ÆÒ´øÆ®(71145) Âø¿ëÇÒ ¶§ ÀÌÆåÆ® (¹ßµ¿ÀÌÆåÆ®ÀÓ, Áö¼ÓÀÌÆåÆ® ¾Æ´Ô)
#ifdef ENABLE_VERSION_162_UPDATE
	SE_EFFECT_HEALER,
#endif
#if defined(ENABLE_BATTLE_ZONE_SYSTEM)
	SE_COMBAT_ZONE_POTION,
#endif
#ifdef ENABLE_ACCE_SYSTEM
	SE_EFFECT_SASH_SUCCEDED,
	SE_EFFECT_SASH_EQUIP,
#endif
	// NEW_EFFECTS
	SE_PVP_WIN,
	SE_PVP_OPEN1,
	SE_PVP_OPEN2,

	SE_PVP_BEGIN1,
	SE_PVP_BEGIN2,

	SE_FR_SUCCESS,
	SE_FR_FAIL,
	// NEW_EFFECTS
	
#ifdef ENABLE_ZODIAC_TEMPLE_SYSTEM
	SE_SKILL_DAMAGE_ZONE,
	SE_SKILL_DAMAGE_ZONE_BUYUK,
	SE_SKILL_DAMAGE_ZONE_ORTA,
	SE_SKILL_DAMAGE_ZONE_KUCUK,
	SE_SKILL_SAFE_ZONE,
	SE_SKILL_SAFE_ZONE_BUYUK,
	SE_SKILL_SAFE_ZONE_ORTA,
	SE_SKILL_SAFE_ZONE_KUCUK,
	SE_METEOR,
	SE_BEAD_RAIN,
	SE_FALL_ROCK,
	SE_ARROW_RAIN,
	SE_HORSE_DROP,
	SE_EGG_DROP,
	SE_DEAPO_BOOM,
#endif
};

#include "item_length.h"

// inventoryÀÇ positionÀ» ³ªÅ¸³»´Â ±¸Á¶Ã¼
// int¿ÍÀÇ ¾Ï½ÃÀû Çüº¯È¯ÀÌ ÀÖ´Â ÀÌÀ¯´Â,
// ÀÎº¥ °ü·ÃµÈ ¸ğµç ÇÔ¼ö°¡ window_typeÀº ¹ŞÁö ¾Ê°í, cell ÇÏ³ª¸¸ ¹Ş¾Ò±â ¶§¹®¿¡,(±âÁ¸¿¡´Â ÀÎº¥ÀÌ ÇÏ³ª »ÓÀÌ¾î¼­ inventory typeÀÌ¶õ°Ô ÇÊ¿ä¾ø¾ú±â ¶§¹®¿¡,)
// ÀÎº¥ °ü·Ã ¸ğµç ÇÔ¼ö È£ÃâºÎºĞÀ» ¼öÁ¤ÇÏ´Â °ÍÀÌ ³­°¨ÇÏ±â ‹š¹®ÀÌ´Ù.

enum EMisc2
{
	DRAGON_SOUL_EQUIP_SLOT_START = INVENTORY_MAX_NUM + WEAR_MAX_NUM,	// 180 + 32 (212)
	DRAGON_SOUL_EQUIP_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_START + (DS_SLOT_MAX * DRAGON_SOUL_DECK_MAX_NUM),	// 212 + 12 ( 224 )
	DRAGON_SOUL_EQUIP_RESERVED_SLOT_END = DRAGON_SOUL_EQUIP_SLOT_END + (DS_SLOT_MAX * DRAGON_SOUL_DECK_RESERVED_MAX_NUM),	// 224 + 18 ( 242 )

#ifdef ENABLE_EXTEND_INVENTORY_SYSTEM
	EXTEND_INVENTORY_SLOT_START = 135,
	EXTEND_INVENTORY_SLOT_MAX = 45,
	EXTEND_INVENTORY_SLOT_END = EXTEND_INVENTORY_SLOT_START + EXTEND_INVENTORY_SLOT_MAX,
#endif

	BELT_INVENTORY_SLOT_START = DRAGON_SOUL_EQUIP_RESERVED_SLOT_END,	// 242
	BELT_INVENTORY_SLOT_END = BELT_INVENTORY_SLOT_START + BELT_INVENTORY_SLOT_COUNT,	// 242 + 16 ( 258 )

	INVENTORY_AND_EQUIP_SLOT_MAX = BELT_INVENTORY_SLOT_END,
};

#pragma pack(push, 1)

typedef struct SItemPos
{
	BYTE window_type;
	WORD cell;
	SItemPos()
	{
		window_type = INVENTORY;
		cell = 0xFFFF;
	}
	SItemPos(BYTE _window_type, WORD _cell)
	{
		window_type = _window_type;
		cell = _cell;
	}
	bool IsValidItemPosition() const
	{
		switch (window_type)
		{
		case RESERVED_WINDOW:
			return false;
		case INVENTORY:
		case EQUIPMENT:
		case BELT_INVENTORY:
			return cell < INVENTORY_AND_EQUIP_SLOT_MAX;
		case DRAGON_SOUL_INVENTORY:
			return cell < (DRAGON_SOUL_INVENTORY_MAX_NUM);
#ifdef ENABLE_EXTEND_INVENTORY_SYSTEM
		case SKILL_BOOK_INVENTORY:
			return cell < (SKILL_BOOK_INVENTORY_MAX_NUM);
		case UPGRADE_ITEMS_INVENTORY:
			return cell < (UPGRADE_ITEMS_INVENTORY_MAX_NUM);
		case STONE_ITEMS_INVENTORY:
			return cell < (STONE_ITEMS_INVENTORY_MAX_NUM);
		case CHEST_ITEMS_INVENTORY:
			return cell < (CHEST_ITEMS_INVENTORY_MAX_NUM);
		case ATTR_ITEMS_INVENTORY:
			return cell < (ATTR_ITEMS_INVENTORY_MAX_NUM);
		case FLOWER_ITEMS_INVENTORY:
			return cell < (FLOWER_ITEMS_INVENTORY_MAX_NUM);
#endif
		case SAFEBOX:
		case MALL:
			return false;
		default:
			return false;
		}
		return false;
	}
	bool IsEquipPosition() const
	{
		return (IsDefaultInventoryEquipPosition() || IsDragonSoulEquipPosition());
	}
	bool IsDefaultInventoryEquipPosition() const
	{
		return ((INVENTORY == window_type || EQUIPMENT == window_type) && cell >= INVENTORY_MAX_NUM && cell < INVENTORY_MAX_NUM + WEAR_MAX_NUM);
	}
	bool IsDragonSoulEquipPosition() const
	{
		return ((INVENTORY == window_type || EQUIPMENT == window_type) && cell >= DRAGON_SOUL_EQUIP_SLOT_START && cell < DRAGON_SOUL_EQUIP_SLOT_END);
	}
	bool IsBeltInventoryPosition() const
	{
		return ((INVENTORY == window_type) && cell >= BELT_INVENTORY_SLOT_START && cell < BELT_INVENTORY_SLOT_END);
	}
#ifdef ENABLE_EXTEND_INVENTORY_SYSTEM
	bool IsExtendInventoryPosition() const
	{
		return (EXTEND_INVENTORY_SLOT_START <= cell) && (EXTEND_INVENTORY_SLOT_END > cell);
	}
#endif
	bool IsDefaultInventoryPosition() const
	{
		return ((INVENTORY == window_type) && cell < INVENTORY_MAX_NUM);
	}
	bool operator==(const struct SItemPos& rhs) const
	{
		return (window_type == rhs.window_type) && (cell == rhs.cell);
	}
	bool operator<(const struct SItemPos& rhs) const
	{
		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));
	}
} TItemPos;

#ifdef ENABLE_REFINE_MSG_ADD
enum ERefineFailType
{
	REFINE_FAIL_GRADE_DOWN,
	REFINE_FAIL_DEL_ITEM,
	REFINE_FAIL_KEEP_GRADE,
	REFINE_FAIL_MAX,
};
#endif

typedef enum
{
	SHOP_COIN_TYPE_GOLD = 0,
	SHOP_COIN_TYPE_SECONDARY_COIN = 1,
#ifdef ENABLE_EVENT_SYSTEM
	SHOP_COIN_TYPE_YEAR_ROUND_COIN = 2,
#endif
#if defined(ENABLE_BATTLE_ZONE_SYSTEM)
	SHOP_COIN_TYPE_COMBAT_ZONE = 3,
#endif
#ifdef ENABLE_CHEQUE_SYSTEM
	SHOP_COIN_TYPE_CHEQUE = 4,
#endif
#ifdef ENABLE_GEM_SYSTEM
	SHOP_COIN_TYPE_GAYA = 5,
#endif
#ifdef ENABLE_ZODIAC_TEMPLE_SYSTEM
	SHOP_COIN_TYPE_ZODIAC = 6,
#endif
#ifdef ENABLE_WORSHIP_SYSTEM
	SHOP_COIN_TYPE_WORSHIP = 7,
#endif
	SHOP_COIN_TYPE_EXP = 8,
	SHOP_COIN_TYPE_DRAGON_COIN = 9,
	SHOP_COIN_TYPE_DRAGON_MARK = 10,
} EShopCoinType;
const TItemPos NPOS(RESERVED_WINDOW, 0xFFFF);
#pragma pack(pop)

#endif
